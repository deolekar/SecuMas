{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"SecuMas","text":"<p>GitHub https://github.com/deolekar/SecuMas. PyPi https://pypi.org/project/SecuMas/.</p>"},{"location":"#about","title":"About","text":"<p>SecuMas is a python based open-source library to provide functions for Securities Master data (aka instrument reference data).</p>"},{"location":"#commands","title":"Commands","text":"<ul> <li><code>pip install SecuMas</code> - Install SecuMas.</li> <li><code>import SecuMas</code> - Import SecuMas.</li> </ul>"},{"location":"#contribution","title":"Contribution","text":"<p>Improvements to SecuMas are most welcome. Integrating contributions will be done on a best-effort basis and can be made easier if the following are considered:</p> <p>Contributions are made as GitHub pull requests.</p> <p>Submitted contributions will often be reformatted and sometimes restructured for consistency with other parts.</p> <p>Contributions will be acknowledged in the release notes.</p> <p>Contributions should add or update a copyright statement if you feel the contribution is significant.</p> <p>All contribution should be made with compatible applicable copyright.</p> <p>It is not needed to modify the README.md, it will be updated on release.</p> <p>All code should be well tested and achieve 100% code coverage.</p>"},{"location":"#license","title":"License","text":"<p>MIT - License ; Copyright (c) 2024 A Deolekar</p> <p>Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:</p> <p>The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.</p> <p>THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.</p>"},{"location":"fileUtility/","title":"File Utility","text":"<p>Utilities to convert market data vendor feed files</p>"},{"location":"fileUtility/#bloomberg","title":"Bloomberg","text":""},{"location":"fileUtility/#csv-bbg","title":"CSV -&gt; BBG","text":"<p>Utility for Bloomberg Back Office feed file conversion. </p>"},{"location":"fileUtility/#input","title":"Input","text":"<p>Pipe delimited CSV with first row as header. Sample</p>"},{"location":"fileUtility/#output","title":"Output","text":"<p>BBG file at specified path.</p> <pre><code>import SecuMas\n\nSecuMas.bbgbo.fromcsv('path/to/inputcsv_to_bbg.csv','path/to/output_bbg_bo.dif')\n</code></pre>"},{"location":"identifier/","title":"Identifier","text":"<p>A module to parse, validate and reformat standard identifiers and codes in different formats.</p>"},{"location":"identifier/#isin","title":"ISIN","text":"<p>Check if ISIN is valid. This checks the length, format and check digit. Returns back ISIN, if valid.</p> <pre><code>print (SecuMas.isin.validate('IN8081309367'))\n</code></pre> <p> Generate check digit. Input expected 11 character string.</p> <pre><code>print (SecuMas.isin.get_check_digit('IN808130936'))\n</code></pre> <p> Generate dummy ISINs (development usecase). Output as list.</p> <pre><code>print (SecuMas.isin.dummy(3))\n</code></pre>"},{"location":"identifier/#cusip","title":"CUSIP","text":"<p>Check if CUSIP is valid. This checks the length, format and check digit. Returns back CUSIP, if valid.</p> <pre><code>print (SecuMas.cusip.validate('H42097107'))\n</code></pre> <p> Generate check digit. Input expected 8 character string.</p> <pre><code>print (SecuMas.cusip.get_check_digit('H4209710'))\n</code></pre> <p> Generate dummy CUSIPs (development usecase). Output as list.</p> <pre><code>print (SecuMas.cusip.dummy(3))\n</code></pre>"},{"location":"identifier/#sedol","title":"SEDOL","text":"<p>Check if SEDOL is valid. This checks the length, format and check digit. Returns back SEDOL, if valid.</p> <pre><code>print (SecuMas.sedol.validate('0870612'))\n</code></pre> <p> Generate check digit. Input expected 6 character string.</p> <pre><code>print (SecuMas.sedol.get_check_digit('087061'))\n</code></pre> <p> Generate dummy SEDOLs (development usecase). Output as list.</p> <pre><code>print (SecuMas.sedol.dummy(3))\n</code></pre>"},{"location":"lookup/","title":"Lookup","text":"<p>A module to parse, validate and lookup codes eg CFI, GICS etc..</p>"},{"location":"lookup/#gics","title":"GICS","text":"<p>Check if GICS is valid. This checks the length, format. Returns back GICS Classification, if valid.</p> <pre><code>import SecuMas\n\nclassification = SecuMas.gics('45203020')\nprint(classification.level(1).name) #Information Technology\nprint(classification.level(2).name) #Technology Hardware &amp; Equipment\nprint(classification.level(3).name) #Electronic Equipment, Instruments &amp; Components\nprint(classification.level(4).name) #Electronic Manufacturing Services\n\nprint(classification.sector.name) #Information Technology\nprint(classification.industry_group.name) #Technology Hardware &amp; Equipment\nprint(classification.industry.name) #Electronic Equipment, Instruments &amp; Components\nprint(classification.sub_industry.name) #Electronic Manufacturing Services\n\nprint(classification.sub_industry.description) #Producers of electronic equipment mainly for the OEM (Original Equipment Manufacturers) markets.\n\nprint(classification.sector.code) #45\nprint(classification.industry_group.code) #4520\nprint(classification.industry.code) #452030\nprint(classification.sub_industry.code) #45203020\n</code></pre> <p> By default latest GICS mapping is referred. Below snippet point to previous version of the mapping.</p> <pre><code>#classification = SecuMas.gics(&lt;gics_code&gt;, &lt;date&gt;)\nclassification = SecuMas.gics('45203020', '20180929')\n</code></pre> <p></p>"}]}